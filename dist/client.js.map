{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;;;;;;;;;;;;;;;ACvzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA","sources":["webpack://camunda-modeler-roles-without-swimlanes-plugin/./client/candidate-group-plugin/CandidateGroupPlugin.js","webpack://camunda-modeler-roles-without-swimlanes-plugin/./client/candidate-group-plugin/PluginToggle.js","webpack://camunda-modeler-roles-without-swimlanes-plugin/./node_modules/camunda-modeler-plugin-helpers/components.js","webpack://camunda-modeler-roles-without-swimlanes-plugin/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-roles-without-swimlanes-plugin/./node_modules/camunda-modeler-plugin-helpers/react.js","webpack://camunda-modeler-roles-without-swimlanes-plugin/webpack/bootstrap","webpack://camunda-modeler-roles-without-swimlanes-plugin/webpack/runtime/compat get default export","webpack://camunda-modeler-roles-without-swimlanes-plugin/webpack/runtime/define property getters","webpack://camunda-modeler-roles-without-swimlanes-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-roles-without-swimlanes-plugin/webpack/runtime/make namespace object","webpack://camunda-modeler-roles-without-swimlanes-plugin/./client/index.js"],"sourcesContent":["class CandidateGroupPlugin {\r\n  // Map<string, BadgeContent>\r\n  overlays = new Map();\r\n  isActive = false;\r\n\r\n  constructor(eventBus, overlays, elementRegistry) {\r\n    this.modelerOverlays = overlays;\r\n    this.modelerEventBus = eventBus;\r\n    this.modelerElementRegistry = elementRegistry;\r\n    eventBus.on('element.changed', (event) => {\r\n      if (this.isActive) {\r\n        const userTasks = this.getUserTasks();\r\n        this.showGroupInfo(userTasks, overlays);\r\n      }\r\n    });\r\n    eventBus.on('plugin.toggle', ({ toggle }) => {\r\n      this.isActive = toggle;\r\n      if (!toggle) {\r\n        this.clearOverlays(overlays);\r\n      } else {\r\n        const userTasks = this.getUserTasks();\r\n        this.showGroupInfo(userTasks, overlays);\r\n      }\r\n    })\r\n  }\r\n\r\n  getUserTasks() {\r\n    return this.modelerElementRegistry.filter((element) => element.type === 'bpmn:UserTask');\r\n  }\r\n\r\n  clearOverlays() {\r\n    [...this.overlays.values()].forEach((badge) => {\r\n      badge.destroy();\r\n      this.modelerOverlays.remove(badge.overlayId);\r\n    });\r\n  }\r\n\r\n  showGroupInfo(userTasks = [], overlays) {\r\n    userTasks.forEach((taskEl) => {\r\n      this.removeTaskOverlay(taskEl.id, overlays);\r\n      const groups = this.getGroups(taskEl);\r\n      if (groups?.length) {\r\n        this.addBadge(taskEl, groups);\r\n      }\r\n    });\r\n  }\r\n\r\n  getGroups(taskEl) {\r\n    const { businessObject } = taskEl;\r\n    const groups = this.getGroupsC8(businessObject) || businessObject?.candidateGroups;\r\n    if (!groups) return [];\r\n    return groups.split(',').map((group) => group.trim());\r\n  }\r\n\r\n  getGroupsC8(businessObject) {\r\n    const values = businessObject.extensionElements?.values;\r\n    if (!values?.length) return null;\r\n    return values.find((val) => !!val.candidateGroups)?.candidateGroups || null;\r\n  }\r\n\r\n  buildHtml(groups) {\r\n    return `<div class=\"badge\">\r\n      <div class=\"badge-content\">\r\n        ${groups.map((group, i) => {\r\n      const isLast = i === groups.length - 1;\r\n      return `<div class=\"group-list-item\">${group}${isLast ? '' : ','}</div>`;\r\n    }).join('\\n')}\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  addBadge(taskEl, groups) {\r\n    const badgeContent = new BadgeContent(taskEl, groups, this.modelerOverlays);\r\n    this.overlays.set(taskEl.id, badgeContent);\r\n  }\r\n\r\n  removeTaskOverlay(taskId) {\r\n    const badge = this.overlays.get(taskId);\r\n    if (!badge) return;\r\n    badge.destroy();\r\n    this.modelerOverlays.remove(badge.overlayId);\r\n    this.overlays.delete(taskId);\r\n  }\r\n}\r\n\r\nCandidateGroupPlugin.$inject = [\r\n  'eventBus',\r\n  'overlays',\r\n  'elementRegistry',\r\n];\r\n\r\nclass BadgeContent {\r\n  badgeConteiner = null;\r\n  badgeWidth = 0;\r\n  badgeContentWidth = 0;\r\n  overlayId = '';\r\n\r\n  constructor(taskEl, groups, overlays) {\r\n    this.groups = groups;\r\n    this.taskEl = taskEl;\r\n    this.badgeConteiner = this.addOverlay(overlays);\r\n    this.badgeWidth = this.getBadgeWidth();\r\n    this.addHoverListener();\r\n    this.setJustifyContent(this.badgeWidth < 100 ? 'center' : 'start')\r\n  }\r\n\r\n  get badgeContent() {\r\n    return this.badgeConteiner?.querySelector('.badge-content') || null;\r\n  }\r\n\r\n  destroy() {\r\n    this.badgeConteiner.removeEventListener('mouseenter', this.onMouseenter)\r\n    this.badgeConteiner.removeEventListener('mouseleave', this.onMouseleave)\r\n  }\r\n\r\n  addOverlay(overlays) {\r\n    const position = { top: -40, left: 40 };\r\n    this.overlayId = overlays.add(this.taskEl, { position, html: this.buildHtml() });\r\n    return overlays.get(this.overlayId).htmlContainer.children.item(0).querySelector('.badge-container');\r\n  }\r\n\r\n  buildHtml() {\r\n    return `<div class=\"badge\">\r\n      <div class=\"badge-container\">\r\n        <div class=\"badge-img\"></div>\r\n        <div class=\"badge-content\">\r\n          ${this.groups.map((group, i) => {\r\n      const isLast = i === this.groups.length - 1;\r\n      return `<div class=\"group-list-item\">${group}${isLast ? '' : ','}</div>`;\r\n    }).join('\\n')}\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  getBadgeWidth() {\r\n    const badgeImgWidth = 20;\r\n    const marginRight = 7;\r\n    return this.badgeContent.scrollWidth + badgeImgWidth + marginRight;\r\n  }\r\n\r\n  addHoverListener() {\r\n    this.badgeConteiner.addEventListener('mouseenter', this.onMouseenter)\r\n    this.badgeConteiner.addEventListener('mouseleave', this.onMouseleave)\r\n  }\r\n\r\n  onMouseenter = () => {\r\n    this.badgeConteiner.style.width = this.badgeWidth > 100 ? `${this.badgeWidth}px` : '100px';\r\n  }\r\n\r\n  onMouseleave = () => {\r\n    this.badgeConteiner.style.width = `100px`;\r\n  }\r\n\r\n  setJustifyContent(position) {\r\n    if (this.badgeContent) {\r\n      this.badgeContent.style.justifyContent = position;\r\n      this.badgeContent.style.width = '100%';\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  __init__: ['CAMUNDA_MODELER_ROLES_WITHOUT_SWIMLANES_PLUGIN'],\r\n  CAMUNDA_MODELER_ROLES_WITHOUT_SWIMLANES_PLUGIN: ['type', CandidateGroupPlugin]\r\n};\r\n","import React, { Fragment, PureComponent } from 'camunda-modeler-plugin-helpers/react';\r\nimport { Fill } from 'camunda-modeler-plugin-helpers/components';\r\n\r\nexport default class PluginToggle extends PureComponent {\r\n  tabStates = new Map();\r\n  currentTabId = '';\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { toggle: false };\r\n    this.subscribe = props.subscribe;\r\n    this.onModelerCreated();\r\n    this.onTabChange();\r\n  }\r\n\r\n  onModelerCreated() {\r\n    this.subscribe('bpmn.modeler.created', (event) => {\r\n      const { modeler, tab } = event;\r\n      this.tabStates.set(tab.id, { modeler, toggle: false });\r\n      this.setEventBus(modeler);\r\n    });\r\n  }\r\n\r\n  onTabChange() {\r\n    this.subscribe('app.activeTabChanged', ({ activeTab }) => {\r\n      this.rememberToggleStateForTab(this.currentTabId);\r\n      this.currentTabId = activeTab.id;\r\n      this.applyTabState(activeTab.id);\r\n    });\r\n  }\r\n\r\n  applyTabState(tabId) {\r\n    const tabState = this.tabStates.get(tabId);\r\n    if (tabState) {\r\n      const { modeler, toggle } = tabState;\r\n      this.setEventBus(modeler);\r\n      this.setState({ toggle });\r\n    } else {\r\n      this.setState({ toggle: false });\r\n    }\r\n  }\r\n\r\n  setEventBus(modeler) {\r\n    this.eventBus = modeler.get('eventBus');\r\n  }\r\n\r\n  rememberToggleStateForTab(tabId) {\r\n    const tabState = this.tabStates.get(tabId);\r\n    if (tabState) {\r\n      tabState.toggle = this.state.toggle;\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    const toggle = !this.state.toggle\r\n    this.setState({ toggle });\r\n    this.eventBus.fire('plugin.toggle', { toggle });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Fill slot=\"status-bar__file\">\r\n          <label htmlFor='plugin-toggle' className='pluggin-toggle'>\r\n            <input type='checkbox' id='plugin-toggle' checked={this.state.toggle} onChange={() => this.toggle()} />\r\n            Candidates\r\n          </label>\r\n        </Fill>\r\n      </Fragment>\r\n    )\r\n  }\r\n}","if (!window.components) {\r\n  throw notCompatible('3.4');\r\n}\r\n\r\nfunction notCompatible(requiredVersion) {\r\n  return new Error('Not compatible with Camunda Modeler < v' + requiredVersion);\r\n}\r\n\r\nexport const NotCompatible = function(requiredVersion) {\r\n  return function NotCompatibleComponent() {\r\n    throw notCompatible(requiredVersion);\r\n  };\r\n};\r\n\r\n/**\r\n * Fill component. Set `slot` to \"toolbar\" to include in the top toolbar.\r\n * Use `group` and `priority=0` to place for correct ordering. The higher\r\n * the priority, the earlier the Fill is displayed within the group.\r\n *\r\n * @type {import('react').ComponentType<{ slot: string, group?: string, priority?: Number }>}\r\n *\r\n * @example\r\n *\r\n * import { Fill } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomFill(props) {\r\n *   return (\r\n *     <Fill group=\"4_export\" slot=\"toolbar\" priority={100}>\r\n *       <button type=\"button\" onClick={ props.openExportTool }>\r\n *         Open Export Tool\r\n *       </button>\r\n *     </Fill>\r\n *   );\r\n * }\r\n */\r\nexport const Fill = window.components.Fill;\r\n\r\n/**\r\n * Modal component.\r\n *\r\n * @type {import('react').ComponentType<{ onClose: Function }>}\r\n *\r\n * @example\r\n *\r\n * import { Modal } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomModal(props) {\r\n *   return (\r\n *    <Modal onClose={ props.onClose }>\r\n *      <Modal.Title>\r\n *        Custom Modal\r\n *      </Modal.Title>\r\n *      <Modal.Body>\r\n *        Hello world!\r\n *      </Modal.Body>\r\n *      <Modal.Footer>\r\n *        <button type=\"button\" onClick={ props.onClose }>\r\n *          Close\r\n *        </button>\r\n *      </Modal.Footer>\r\n *    </Modal>\r\n *   );\r\n * }\r\n */\r\nexport const Modal = window.components.Modal;\r\n\r\n/**\r\n * Overlay component.\r\n *\r\n * @type {import('react').ComponentType<{ \r\n *  onClose: Function, \r\n *  anchor: Node, \r\n *  offset?: { top?: number, bottom?: number, left?: number, right?: number }, \r\n *  maxWidth?: number | string,\r\n *  maxHeight?: number | string,\r\n *  minWidth?: number | string,\r\n *  minHeight?: number | string\r\n * }>}\r\n *\r\n * @example\r\n * \r\n * import { Overlay } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomOverlay(props) {\r\n *   return (\r\n *    <Overlay onClose={ props.onClose } anchor={ props.btn_ref } offset={ props.anchor }>\r\n *      <Overlay.Title>\r\n *        Custom Modal\r\n *      </Overlay.Title>\r\n *      <Overlay.Body>\r\n *        Hello world!\r\n *      </Overlay.Body>\r\n *      <Overlay.Footer>\r\n *        <button type=\"button\" onClick={ props.onClose }>\r\n *          Close\r\n *        </button>\r\n *      </Overlay.Footer>\r\n *    </Overlay>\r\n *   );\r\n * }\r\n */\r\n export const Overlay = window.components.Overlay || NotCompatible('5.0');\r\n\r\n /**\r\n * Section component.\r\n *\r\n * @type {import('react').ComponentType<{ maxHeight: Number | String, relativePos: Boolean } }>}\r\n *\r\n * @example\r\n * \r\n * import { Section } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomSection(props) {\r\n *   return (\r\n *    <Section maxHeight=\"240px\">\r\n *     <Section.Header>\r\n *       Custom section\r\n *     </Section.Header>\r\n *     <Section.Body>\r\n *       Hello world!\r\n *     </Section.Body>\r\n *     <Section.Actions>\r\n *      <button type=\"button\" onClick={ props.onClose }>\r\n *        Close\r\n *      </button>\r\n *     </Section.Actions>\r\n *    </Section>\r\n *   );\r\n * }\r\n */\r\nexport const Section = window.components.Section || NotCompatible('5.0');\r\n\r\n /**\r\n * ToggleSwitch component.\r\n *\r\n * @type {import('react').ComponentType<{ id: string, name: string, label?: string, switcherLabel?: string, description?: string }>}\r\n *\r\n * @example\r\n * \r\n * import { ToggleSwitch } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomToggle(props) {\r\n *   return (\r\n *    <Formik initialValues={ initialValues } onSubmit={ this.onSubmit }>\r\n *      {() => (\r\n *        <Form>\r\n *          <Field\r\n *            component={ ToggleSwitch }\r\n *            switcherLabel=\"Switcher label\"\r\n *            id={ id }\r\n *            name={ name }\r\n *            description=\"Toggle description\"\r\n *          />\r\n *        </Form>\r\n *       )}\r\n *    </Formik>\r\n *   );\r\n * }\r\n */\r\nexport const ToggleSwitch = window.components.ToggleSwitch || NotCompatible('5.0');","/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {Object} plugin\r\n * @param {String} type\r\n */\r\nexport function registerClientPlugin(plugin, type) {\r\n  var plugins = window.plugins || [];\r\n  window.plugins = plugins;\r\n\r\n  if (!plugin) {\r\n    throw new Error('plugin not specified');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new Error('type not specified');\r\n  }\r\n\r\n  plugins.push({\r\n    plugin: plugin,\r\n    type: type\r\n  });\r\n}\r\n\r\n/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {import('react').ComponentType} extension\r\n *\r\n * @example\r\n *\r\n * import MyExtensionComponent from './MyExtensionComponent';\r\n *\r\n * registerClientExtension(MyExtensionComponent);\r\n */\r\nexport function registerClientExtension(component) {\r\n  registerClientPlugin(component, 'client');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerPlatformBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerPlatformBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerCloudBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerCloudBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerCloudBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerPlatformBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerCloudBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerDmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerDmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerDmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerDmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const DmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\r\n * registerDmnJSPlugin(DmnJSModule, 'drd')\r\n */\r\nexport function registerDmnJSPlugin(module, components) {\r\n\r\n  if (!Array.isArray(components)) {\r\n    components = [ components ]\r\n  }\r\n\r\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \r\n}\r\n\r\n/**\r\n * Return the modeler directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getModelerDirectory() {\r\n  return window.getModelerDirectory();\r\n}\r\n\r\n/**\r\n * Return the modeler plugin directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getPluginsDirectory() {\r\n  return window.getPluginsDirectory();\r\n}","if (!window.react) {\r\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\r\n}\r\n\r\n/**\r\n * React object used by Camunda Modeler. Use it to create UI extension.\r\n *\r\n * @type {import('react')}\r\n */\r\nmodule.exports = window.react;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerClientExtension, registerBpmnJSPlugin } from 'camunda-modeler-plugin-helpers';\r\nimport CAMUNDA_MODELER_ROLES_WITHOUT_SWIMLANES_PLUGIN from './candidate-group-plugin/CandidateGroupPlugin';\r\nimport PluginToggle from './candidate-group-plugin/PluginToggle';\r\n\r\nregisterBpmnJSPlugin(CAMUNDA_MODELER_ROLES_WITHOUT_SWIMLANES_PLUGIN)\r\nregisterClientExtension(PluginToggle)"],"names":[],"sourceRoot":""}